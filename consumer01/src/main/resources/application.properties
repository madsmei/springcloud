spring.application.name=ribbon-consumer
server.port=9001

eureka.client.service-url.defaultZone=http://mads:123456@eureka-server1:9000/eureka/,http://mads:123456@eureka-server2:9001/eureka/
#服务续约，心跳的时间间隔  单位 s
eureka.instance.lease-renewal-interval-in-seconds=30

#如果从前一次发送心跳时间起，90秒没接受到新的心跳，讲剔除服务
eureka.instance.lease-expiration-duration-in-seconds=90

#表示eureka client间隔多久去拉取服务注册信息，默认为30秒
eureka.client.registry-fetch-interval-seconds=30

#健康检测
eureka.client.healthcheck.enabled=true

#Feign脱离Eureka使用配置方式
#ribbon.eureka.enabled=false
#micoroservice-user-ribbon.listOfServers=127.0.0.1:9001,127.0.0.1:9002

#feign中启用hystrix
feign.hystrix.enabled = true

hystrix.command.default.execution.timeout.enabled = true
#hystrix超时时间设置（ms），超过设置时间触发降级
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds = 2000
serviceId.ribbon.ReadTimeout = 1000
#设置服务调用的连接超时以及读取超时（ms），超过设置时间或者抛出异常触发ribbon的重试，目前我们没设置重试测试，默认会重试其他负载均衡实例一次
serviceId.ribbon.ConnectTimeout = 1000


# 关闭ribbon访问注册中心Eureka Server发现服务，但是服务依旧会注册。
#true使用eureka false不使用,从下面配置中拿服务出来，（这种一般在开发测试时使用。平时用的不多）
ribbon.eureka.enabled=true
#指定调用的节点    localhost:8001  localhost:8002  localhost:8003
#micro-order.ribbon.listOfServers=localhost:8001,localhost:8002,localhost:8003
#单位ms ,请求连接超时时间
#micro-order.ribbon.ConnectTimeout=1000
#单位ms ,请求处理的超时时间
#micro-order.ribbon.ReadTimeout=2000

#
#micro-order.ribbon.OkToRetryOnAllOperations=true
#切换实例的重试次数
#micro-order.ribbon.MaxAutoRetriesNextServer=2
#对当前实例的重试次数 当Eureka中可以找到服务，但是服务连不上时将会重试
#micro-order.ribbon.MaxAutoRetries=2
#
#micro-order.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#micro-order.ribbon.NFLoadBalancerPingClassName=com.netflix.loadbalancer.PingUrl